
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 */

export type User = {
  id: number
  FirstName: string
  LastName: string
  DateOfBirth: string
  Username: string
  Email: string
  Password: string
}

/**
 * Model Book
 */

export type Book = {
  id: number
  Name: string
  Author: string
  PicUrl: string
  Summery: string
  ReaderId: number
}

/**
 * Model UserBookFave
 */

export type UserBookFave = {
  id: number
  UserID: number
  BookID: number
}

/**
 * Model Comments
 */

export type Comments = {
  id: number
  createdAt: Date
  updatedAt: Date
  BookID: number
}

/**
 * Model Vote
 */

export type Vote = {
  id: number
  CommentID: number
  Count: number
  UserID: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<GlobalReject>;

  /**
   * `prisma.userBookFave`: Exposes CRUD operations for the **UserBookFave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBookFaves
    * const userBookFaves = await prisma.userBookFave.findMany()
    * ```
    */
  get userBookFave(): Prisma.UserBookFaveDelegate<GlobalReject>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.CommentsDelegate<GlobalReject>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.27.0
   * Query Engine version: cdba6ec525e0213cce26f8e4bb23cf556d1479bb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Book: 'Book',
    UserBookFave: 'UserBookFave',
    Comments: 'Comments',
    Vote: 'Vote'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    FirstName: string | null
    LastName: string | null
    DateOfBirth: string | null
    Username: string | null
    Email: string | null
    Password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    FirstName: string | null
    LastName: string | null
    DateOfBirth: string | null
    Username: string | null
    Email: string | null
    Password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    FirstName: number
    LastName: number
    DateOfBirth: number
    Username: number
    Email: number
    Password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    FirstName?: true
    LastName?: true
    DateOfBirth?: true
    Username?: true
    Email?: true
    Password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    FirstName?: true
    LastName?: true
    DateOfBirth?: true
    Username?: true
    Email?: true
    Password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    FirstName?: true
    LastName?: true
    DateOfBirth?: true
    Username?: true
    Email?: true
    Password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    FirstName?: boolean
    LastName?: boolean
    DateOfBirth?: boolean
    Username?: boolean
    Email?: boolean
    Password?: boolean
    Book?: boolean | BookFindManyArgs
    FaveBook?: boolean | UserBookFaveArgs
    Vote?: boolean | VoteFindManyArgs
  }

  export type UserInclude = {
    Book?: boolean | BookFindManyArgs
    FaveBook?: boolean | UserBookFaveArgs
    Vote?: boolean | VoteFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Book'
        ? Array < BookGetPayload<S['include'][P]>>  :
        P extends 'FaveBook'
        ? UserBookFaveGetPayload<S['include'][P]> | null :
        P extends 'Vote'
        ? Array < VoteGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'Book'
        ? Array < BookGetPayload<S['select'][P]>>  :
        P extends 'FaveBook'
        ? UserBookFaveGetPayload<S['select'][P]> | null :
        P extends 'Vote'
        ? Array < VoteGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Book<T extends BookFindManyArgs = {}>(args?: Subset<T, BookFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Book>>, PrismaPromise<Array<BookGetPayload<T>>>>;

    FaveBook<T extends UserBookFaveArgs = {}>(args?: Subset<T, UserBookFaveArgs>): CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave | null >, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T> | null >>;

    Vote<T extends VoteFindManyArgs = {}>(args?: Subset<T, VoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Vote>>, PrismaPromise<Array<VoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Book
   */


  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
    max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    id: number | null
    ReaderId: number | null
  }

  export type BookSumAggregateOutputType = {
    id: number | null
    ReaderId: number | null
  }

  export type BookMinAggregateOutputType = {
    id: number | null
    Name: string | null
    Author: string | null
    PicUrl: string | null
    Summery: string | null
    ReaderId: number | null
  }

  export type BookMaxAggregateOutputType = {
    id: number | null
    Name: string | null
    Author: string | null
    PicUrl: string | null
    Summery: string | null
    ReaderId: number | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    Name: number
    Author: number
    PicUrl: number
    Summery: number
    ReaderId: number
    _all: number
  }


  export type BookAvgAggregateInputType = {
    id?: true
    ReaderId?: true
  }

  export type BookSumAggregateInputType = {
    id?: true
    ReaderId?: true
  }

  export type BookMinAggregateInputType = {
    id?: true
    Name?: true
    Author?: true
    PicUrl?: true
    Summery?: true
    ReaderId?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    Name?: true
    Author?: true
    PicUrl?: true
    Summery?: true
    ReaderId?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    Name?: true
    Author?: true
    PicUrl?: true
    Summery?: true
    ReaderId?: true
    _all?: true
  }

  export type BookAggregateArgs = {
    /**
     * Filter which Book to aggregate.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }


    
    
  export type BookGroupByArgs = {
    where?: BookWhereInput
    orderBy?: Enumerable<BookOrderByInput>
    by: Array<BookScalarFieldEnum>
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _avg?: BookAvgAggregateInputType
    _sum?: BookSumAggregateInputType
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }


  export type BookGroupByOutputType = {
    id: number
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    ReaderId: number
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = Promise<
    Array<
      PickArray<BookGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], BookGroupByOutputType[P]> 
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      > 
    >


  export type BookSelect = {
    id?: boolean
    Name?: boolean
    Author?: boolean
    PicUrl?: boolean
    Summery?: boolean
    Comments?: boolean | CommentsFindManyArgs
    Reader?: boolean | UserArgs
    ReaderId?: boolean
    FaveBook?: boolean | UserBookFaveArgs
  }

  export type BookInclude = {
    Comments?: boolean | CommentsFindManyArgs
    Reader?: boolean | UserArgs
    FaveBook?: boolean | UserBookFaveArgs
  }

  export type BookGetPayload<
    S extends boolean | null | undefined | BookArgs,
    U = keyof S
      > = S extends true
        ? Book
    : S extends undefined
    ? never
    : S extends BookArgs | BookFindManyArgs
    ?'include' extends U
    ? Book  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Comments'
        ? Array < CommentsGetPayload<S['include'][P]>>  :
        P extends 'Reader'
        ? UserGetPayload<S['include'][P]> :
        P extends 'FaveBook'
        ? UserBookFaveGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Book ?Book [P]
  : 
          P extends 'Comments'
        ? Array < CommentsGetPayload<S['select'][P]>>  :
        P extends 'Reader'
        ? UserGetPayload<S['select'][P]> :
        P extends 'FaveBook'
        ? UserBookFaveGetPayload<S['select'][P]> | null : never
  } 
    : Book
  : Book


  type BookCountArgs = Merge<
    Omit<BookFindManyArgs, 'select' | 'include'> & {
      select?: BookCountAggregateInputType | true
    }
  >

  export interface BookDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Book'> extends True ? CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>> : CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Book'> extends True ? CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>> : CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookFindManyArgs>(
      args?: SelectSubset<T, BookFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Book>>, PrismaPromise<Array<BookGetPayload<T>>>>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
    **/
    create<T extends BookCreateArgs>(
      args: SelectSubset<T, BookCreateArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Create many Books.
     *     @param {BookCreateManyArgs} args - Arguments to create many Books.
     *     @example
     *     // Create many Books
     *     const book = await prisma.book.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookCreateManyArgs>(
      args?: SelectSubset<T, BookCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
    **/
    delete<T extends BookDeleteArgs>(
      args: SelectSubset<T, BookDeleteArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookUpdateArgs>(
      args: SelectSubset<T, BookUpdateArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookDeleteManyArgs>(
      args?: SelectSubset<T, BookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookUpdateManyArgs>(
      args: SelectSubset<T, BookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
    **/
    upsert<T extends BookUpsertArgs>(
      args: SelectSubset<T, BookUpsertArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Comments<T extends CommentsFindManyArgs = {}>(args?: Subset<T, CommentsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comments>>, PrismaPromise<Array<CommentsGetPayload<T>>>>;

    Reader<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    FaveBook<T extends UserBookFaveArgs = {}>(args?: Subset<T, UserBookFaveArgs>): CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave | null >, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Book findUnique
   */
  export type BookFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Throw an Error if a Book can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Book to fetch.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book findFirst
   */
  export type BookFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Throw an Error if a Book can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Book to fetch.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     * 
    **/
    distinct?: Enumerable<BookScalarFieldEnum>
  }


  /**
   * Book findMany
   */
  export type BookFindManyArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Books to fetch.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookScalarFieldEnum>
  }


  /**
   * Book create
   */
  export type BookCreateArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The data needed to create a Book.
     * 
    **/
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }


  /**
   * Book createMany
   */
  export type BookCreateManyArgs = {
    data: Enumerable<BookCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Book update
   */
  export type BookUpdateArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The data needed to update a Book.
     * 
    **/
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs = {
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    where?: BookWhereInput
  }


  /**
   * Book upsert
   */
  export type BookUpsertArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The filter to search for the Book to update in case it exists.
     * 
    **/
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     * 
    **/
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }


  /**
   * Book delete
   */
  export type BookDeleteArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter which Book to delete.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs = {
    where?: BookWhereInput
  }


  /**
   * Book without action
   */
  export type BookArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
  }



  /**
   * Model UserBookFave
   */


  export type AggregateUserBookFave = {
    _count: UserBookFaveCountAggregateOutputType | null
    count: UserBookFaveCountAggregateOutputType | null
    _avg: UserBookFaveAvgAggregateOutputType | null
    avg: UserBookFaveAvgAggregateOutputType | null
    _sum: UserBookFaveSumAggregateOutputType | null
    sum: UserBookFaveSumAggregateOutputType | null
    _min: UserBookFaveMinAggregateOutputType | null
    min: UserBookFaveMinAggregateOutputType | null
    _max: UserBookFaveMaxAggregateOutputType | null
    max: UserBookFaveMaxAggregateOutputType | null
  }

  export type UserBookFaveAvgAggregateOutputType = {
    id: number | null
    UserID: number | null
    BookID: number | null
  }

  export type UserBookFaveSumAggregateOutputType = {
    id: number | null
    UserID: number | null
    BookID: number | null
  }

  export type UserBookFaveMinAggregateOutputType = {
    id: number | null
    UserID: number | null
    BookID: number | null
  }

  export type UserBookFaveMaxAggregateOutputType = {
    id: number | null
    UserID: number | null
    BookID: number | null
  }

  export type UserBookFaveCountAggregateOutputType = {
    id: number
    UserID: number
    BookID: number
    _all: number
  }


  export type UserBookFaveAvgAggregateInputType = {
    id?: true
    UserID?: true
    BookID?: true
  }

  export type UserBookFaveSumAggregateInputType = {
    id?: true
    UserID?: true
    BookID?: true
  }

  export type UserBookFaveMinAggregateInputType = {
    id?: true
    UserID?: true
    BookID?: true
  }

  export type UserBookFaveMaxAggregateInputType = {
    id?: true
    UserID?: true
    BookID?: true
  }

  export type UserBookFaveCountAggregateInputType = {
    id?: true
    UserID?: true
    BookID?: true
    _all?: true
  }

  export type UserBookFaveAggregateArgs = {
    /**
     * Filter which UserBookFave to aggregate.
     * 
    **/
    where?: UserBookFaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBookFaves to fetch.
     * 
    **/
    orderBy?: Enumerable<UserBookFaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserBookFaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBookFaves from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBookFaves.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBookFaves
    **/
    _count?: true | UserBookFaveCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserBookFaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBookFaveAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserBookFaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBookFaveSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserBookFaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBookFaveMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserBookFaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBookFaveMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserBookFaveMaxAggregateInputType
  }

  export type GetUserBookFaveAggregateType<T extends UserBookFaveAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBookFave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBookFave[P]>
      : GetScalarType<T[P], AggregateUserBookFave[P]>
  }


    
    
  export type UserBookFaveGroupByArgs = {
    where?: UserBookFaveWhereInput
    orderBy?: Enumerable<UserBookFaveOrderByInput>
    by: Array<UserBookFaveScalarFieldEnum>
    having?: UserBookFaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBookFaveCountAggregateInputType | true
    _avg?: UserBookFaveAvgAggregateInputType
    _sum?: UserBookFaveSumAggregateInputType
    _min?: UserBookFaveMinAggregateInputType
    _max?: UserBookFaveMaxAggregateInputType
  }


  export type UserBookFaveGroupByOutputType = {
    id: number
    UserID: number
    BookID: number
    _count: UserBookFaveCountAggregateOutputType | null
    _avg: UserBookFaveAvgAggregateOutputType | null
    _sum: UserBookFaveSumAggregateOutputType | null
    _min: UserBookFaveMinAggregateOutputType | null
    _max: UserBookFaveMaxAggregateOutputType | null
  }

  type GetUserBookFaveGroupByPayload<T extends UserBookFaveGroupByArgs> = Promise<
    Array<
      PickArray<UserBookFaveGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserBookFaveGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserBookFaveGroupByOutputType[P]> 
            : GetScalarType<T[P], UserBookFaveGroupByOutputType[P]>
        }
      > 
    >


  export type UserBookFaveSelect = {
    id?: boolean
    User?: boolean | UserArgs
    UserID?: boolean
    Book?: boolean | BookArgs
    BookID?: boolean
  }

  export type UserBookFaveInclude = {
    User?: boolean | UserArgs
    Book?: boolean | BookArgs
  }

  export type UserBookFaveGetPayload<
    S extends boolean | null | undefined | UserBookFaveArgs,
    U = keyof S
      > = S extends true
        ? UserBookFave
    : S extends undefined
    ? never
    : S extends UserBookFaveArgs | UserBookFaveFindManyArgs
    ?'include' extends U
    ? UserBookFave  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> :
        P extends 'Book'
        ? BookGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserBookFave ?UserBookFave [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> :
        P extends 'Book'
        ? BookGetPayload<S['select'][P]> : never
  } 
    : UserBookFave
  : UserBookFave


  type UserBookFaveCountArgs = Merge<
    Omit<UserBookFaveFindManyArgs, 'select' | 'include'> & {
      select?: UserBookFaveCountAggregateInputType | true
    }
  >

  export interface UserBookFaveDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserBookFave that matches the filter.
     * @param {UserBookFaveFindUniqueArgs} args - Arguments to find a UserBookFave
     * @example
     * // Get one UserBookFave
     * const userBookFave = await prisma.userBookFave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserBookFaveFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserBookFaveFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserBookFave'> extends True ? CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave>, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T>>> : CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave | null >, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T> | null >>

    /**
     * Find the first UserBookFave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFaveFindFirstArgs} args - Arguments to find a UserBookFave
     * @example
     * // Get one UserBookFave
     * const userBookFave = await prisma.userBookFave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserBookFaveFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserBookFaveFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserBookFave'> extends True ? CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave>, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T>>> : CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave | null >, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T> | null >>

    /**
     * Find zero or more UserBookFaves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFaveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBookFaves
     * const userBookFaves = await prisma.userBookFave.findMany()
     * 
     * // Get first 10 UserBookFaves
     * const userBookFaves = await prisma.userBookFave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBookFaveWithIdOnly = await prisma.userBookFave.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserBookFaveFindManyArgs>(
      args?: SelectSubset<T, UserBookFaveFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserBookFave>>, PrismaPromise<Array<UserBookFaveGetPayload<T>>>>

    /**
     * Create a UserBookFave.
     * @param {UserBookFaveCreateArgs} args - Arguments to create a UserBookFave.
     * @example
     * // Create one UserBookFave
     * const UserBookFave = await prisma.userBookFave.create({
     *   data: {
     *     // ... data to create a UserBookFave
     *   }
     * })
     * 
    **/
    create<T extends UserBookFaveCreateArgs>(
      args: SelectSubset<T, UserBookFaveCreateArgs>
    ): CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave>, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T>>>

    /**
     * Create many UserBookFaves.
     *     @param {UserBookFaveCreateManyArgs} args - Arguments to create many UserBookFaves.
     *     @example
     *     // Create many UserBookFaves
     *     const userBookFave = await prisma.userBookFave.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserBookFaveCreateManyArgs>(
      args?: SelectSubset<T, UserBookFaveCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserBookFave.
     * @param {UserBookFaveDeleteArgs} args - Arguments to delete one UserBookFave.
     * @example
     * // Delete one UserBookFave
     * const UserBookFave = await prisma.userBookFave.delete({
     *   where: {
     *     // ... filter to delete one UserBookFave
     *   }
     * })
     * 
    **/
    delete<T extends UserBookFaveDeleteArgs>(
      args: SelectSubset<T, UserBookFaveDeleteArgs>
    ): CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave>, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T>>>

    /**
     * Update one UserBookFave.
     * @param {UserBookFaveUpdateArgs} args - Arguments to update one UserBookFave.
     * @example
     * // Update one UserBookFave
     * const userBookFave = await prisma.userBookFave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserBookFaveUpdateArgs>(
      args: SelectSubset<T, UserBookFaveUpdateArgs>
    ): CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave>, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T>>>

    /**
     * Delete zero or more UserBookFaves.
     * @param {UserBookFaveDeleteManyArgs} args - Arguments to filter UserBookFaves to delete.
     * @example
     * // Delete a few UserBookFaves
     * const { count } = await prisma.userBookFave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserBookFaveDeleteManyArgs>(
      args?: SelectSubset<T, UserBookFaveDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBookFaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBookFaves
     * const userBookFave = await prisma.userBookFave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserBookFaveUpdateManyArgs>(
      args: SelectSubset<T, UserBookFaveUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBookFave.
     * @param {UserBookFaveUpsertArgs} args - Arguments to update or create a UserBookFave.
     * @example
     * // Update or create a UserBookFave
     * const userBookFave = await prisma.userBookFave.upsert({
     *   create: {
     *     // ... data to create a UserBookFave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBookFave we want to update
     *   }
     * })
    **/
    upsert<T extends UserBookFaveUpsertArgs>(
      args: SelectSubset<T, UserBookFaveUpsertArgs>
    ): CheckSelect<T, Prisma__UserBookFaveClient<UserBookFave>, Prisma__UserBookFaveClient<UserBookFaveGetPayload<T>>>

    /**
     * Count the number of UserBookFaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFaveCountArgs} args - Arguments to filter UserBookFaves to count.
     * @example
     * // Count the number of UserBookFaves
     * const count = await prisma.userBookFave.count({
     *   where: {
     *     // ... the filter for the UserBookFaves we want to count
     *   }
     * })
    **/
    count<T extends UserBookFaveCountArgs>(
      args?: Subset<T, UserBookFaveCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBookFaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBookFave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBookFaveAggregateArgs>(args: Subset<T, UserBookFaveAggregateArgs>): PrismaPromise<GetUserBookFaveAggregateType<T>>

    /**
     * Group by UserBookFave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBookFaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBookFaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBookFaveGroupByArgs['orderBy'] }
        : { orderBy?: UserBookFaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBookFaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBookFaveGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBookFave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserBookFaveClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Book<T extends BookArgs = {}>(args?: Subset<T, BookArgs>): CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserBookFave findUnique
   */
  export type UserBookFaveFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserBookFave
     * 
    **/
    select?: UserBookFaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookFaveInclude | null
    /**
     * Throw an Error if a UserBookFave can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserBookFave to fetch.
     * 
    **/
    where: UserBookFaveWhereUniqueInput
  }


  /**
   * UserBookFave findFirst
   */
  export type UserBookFaveFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserBookFave
     * 
    **/
    select?: UserBookFaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookFaveInclude | null
    /**
     * Throw an Error if a UserBookFave can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserBookFave to fetch.
     * 
    **/
    where?: UserBookFaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBookFaves to fetch.
     * 
    **/
    orderBy?: Enumerable<UserBookFaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBookFaves.
     * 
    **/
    cursor?: UserBookFaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBookFaves from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBookFaves.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBookFaves.
     * 
    **/
    distinct?: Enumerable<UserBookFaveScalarFieldEnum>
  }


  /**
   * UserBookFave findMany
   */
  export type UserBookFaveFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserBookFave
     * 
    **/
    select?: UserBookFaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookFaveInclude | null
    /**
     * Filter, which UserBookFaves to fetch.
     * 
    **/
    where?: UserBookFaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBookFaves to fetch.
     * 
    **/
    orderBy?: Enumerable<UserBookFaveOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBookFaves.
     * 
    **/
    cursor?: UserBookFaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBookFaves from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBookFaves.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserBookFaveScalarFieldEnum>
  }


  /**
   * UserBookFave create
   */
  export type UserBookFaveCreateArgs = {
    /**
     * Select specific fields to fetch from the UserBookFave
     * 
    **/
    select?: UserBookFaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookFaveInclude | null
    /**
     * The data needed to create a UserBookFave.
     * 
    **/
    data: XOR<UserBookFaveCreateInput, UserBookFaveUncheckedCreateInput>
  }


  /**
   * UserBookFave createMany
   */
  export type UserBookFaveCreateManyArgs = {
    data: Enumerable<UserBookFaveCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserBookFave update
   */
  export type UserBookFaveUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserBookFave
     * 
    **/
    select?: UserBookFaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookFaveInclude | null
    /**
     * The data needed to update a UserBookFave.
     * 
    **/
    data: XOR<UserBookFaveUpdateInput, UserBookFaveUncheckedUpdateInput>
    /**
     * Choose, which UserBookFave to update.
     * 
    **/
    where: UserBookFaveWhereUniqueInput
  }


  /**
   * UserBookFave updateMany
   */
  export type UserBookFaveUpdateManyArgs = {
    data: XOR<UserBookFaveUpdateManyMutationInput, UserBookFaveUncheckedUpdateManyInput>
    where?: UserBookFaveWhereInput
  }


  /**
   * UserBookFave upsert
   */
  export type UserBookFaveUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserBookFave
     * 
    **/
    select?: UserBookFaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookFaveInclude | null
    /**
     * The filter to search for the UserBookFave to update in case it exists.
     * 
    **/
    where: UserBookFaveWhereUniqueInput
    /**
     * In case the UserBookFave found by the `where` argument doesn't exist, create a new UserBookFave with this data.
     * 
    **/
    create: XOR<UserBookFaveCreateInput, UserBookFaveUncheckedCreateInput>
    /**
     * In case the UserBookFave was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserBookFaveUpdateInput, UserBookFaveUncheckedUpdateInput>
  }


  /**
   * UserBookFave delete
   */
  export type UserBookFaveDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserBookFave
     * 
    **/
    select?: UserBookFaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookFaveInclude | null
    /**
     * Filter which UserBookFave to delete.
     * 
    **/
    where: UserBookFaveWhereUniqueInput
  }


  /**
   * UserBookFave deleteMany
   */
  export type UserBookFaveDeleteManyArgs = {
    where?: UserBookFaveWhereInput
  }


  /**
   * UserBookFave without action
   */
  export type UserBookFaveArgs = {
    /**
     * Select specific fields to fetch from the UserBookFave
     * 
    **/
    select?: UserBookFaveSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserBookFaveInclude | null
  }



  /**
   * Model Comments
   */


  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
    max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    id: number | null
    BookID: number | null
  }

  export type CommentsSumAggregateOutputType = {
    id: number | null
    BookID: number | null
  }

  export type CommentsMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    BookID: number | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    BookID: number | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    BookID: number
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    id?: true
    BookID?: true
  }

  export type CommentsSumAggregateInputType = {
    id?: true
    BookID?: true
  }

  export type CommentsMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    BookID?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    BookID?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    BookID?: true
    _all?: true
  }

  export type CommentsAggregateArgs = {
    /**
     * Filter which Comments to aggregate.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }


    
    
  export type CommentsGroupByArgs = {
    where?: CommentsWhereInput
    orderBy?: Enumerable<CommentsOrderByInput>
    by: Array<CommentsScalarFieldEnum>
    having?: CommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _avg?: CommentsAvgAggregateInputType
    _sum?: CommentsSumAggregateInputType
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }


  export type CommentsGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    BookID: number
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = Promise<
    Array<
      PickArray<CommentsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CommentsGroupByOutputType[P]> 
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      > 
    >


  export type CommentsSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Vote?: boolean | VoteFindManyArgs
    Books?: boolean | BookArgs
    BookID?: boolean
  }

  export type CommentsInclude = {
    Vote?: boolean | VoteFindManyArgs
    Books?: boolean | BookArgs
  }

  export type CommentsGetPayload<
    S extends boolean | null | undefined | CommentsArgs,
    U = keyof S
      > = S extends true
        ? Comments
    : S extends undefined
    ? never
    : S extends CommentsArgs | CommentsFindManyArgs
    ?'include' extends U
    ? Comments  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Vote'
        ? Array < VoteGetPayload<S['include'][P]>>  :
        P extends 'Books'
        ? BookGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Comments ?Comments [P]
  : 
          P extends 'Vote'
        ? Array < VoteGetPayload<S['select'][P]>>  :
        P extends 'Books'
        ? BookGetPayload<S['select'][P]> : never
  } 
    : Comments
  : Comments


  type CommentsCountArgs = Merge<
    Omit<CommentsFindManyArgs, 'select' | 'include'> & {
      select?: CommentsCountAggregateInputType | true
    }
  >

  export interface CommentsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Comments that matches the filter.
     * @param {CommentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comments'> extends True ? CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>> : CheckSelect<T, Prisma__CommentsClient<Comments | null >, Prisma__CommentsClient<CommentsGetPayload<T> | null >>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comments'> extends True ? CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>> : CheckSelect<T, Prisma__CommentsClient<Comments | null >, Prisma__CommentsClient<CommentsGetPayload<T> | null >>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentsFindManyArgs>(
      args?: SelectSubset<T, CommentsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Comments>>, PrismaPromise<Array<CommentsGetPayload<T>>>>

    /**
     * Create a Comments.
     * @param {CommentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends CommentsCreateArgs>(
      args: SelectSubset<T, CommentsCreateArgs>
    ): CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>>

    /**
     * Create many Comments.
     *     @param {CommentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentsCreateManyArgs>(
      args?: SelectSubset<T, CommentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends CommentsDeleteArgs>(
      args: SelectSubset<T, CommentsDeleteArgs>
    ): CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>>

    /**
     * Update one Comments.
     * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentsUpdateArgs>(
      args: SelectSubset<T, CommentsUpdateArgs>
    ): CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentsDeleteManyArgs>(
      args?: SelectSubset<T, CommentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentsUpdateManyArgs>(
      args: SelectSubset<T, CommentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends CommentsUpsertArgs>(
      args: SelectSubset<T, CommentsUpsertArgs>
    ): CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentsCountArgs>(
      args?: Subset<T, CommentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Vote<T extends VoteFindManyArgs = {}>(args?: Subset<T, VoteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Vote>>, PrismaPromise<Array<VoteGetPayload<T>>>>;

    Books<T extends BookArgs = {}>(args?: Subset<T, BookArgs>): CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Comments findUnique
   */
  export type CommentsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Throw an Error if a Comments can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments findFirst
   */
  export type CommentsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Throw an Error if a Comments can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * Comments findMany
   */
  export type CommentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * Comments create
   */
  export type CommentsCreateArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The data needed to create a Comments.
     * 
    **/
    data: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
  }


  /**
   * Comments createMany
   */
  export type CommentsCreateManyArgs = {
    data: Enumerable<CommentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comments update
   */
  export type CommentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The data needed to update a Comments.
     * 
    **/
    data: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
    /**
     * Choose, which Comments to update.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments updateMany
   */
  export type CommentsUpdateManyArgs = {
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyInput>
    where?: CommentsWhereInput
  }


  /**
   * Comments upsert
   */
  export type CommentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The filter to search for the Comments to update in case it exists.
     * 
    **/
    where: CommentsWhereUniqueInput
    /**
     * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
     * 
    **/
    create: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
    /**
     * In case the Comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
  }


  /**
   * Comments delete
   */
  export type CommentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter which Comments to delete.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments deleteMany
   */
  export type CommentsDeleteManyArgs = {
    where?: CommentsWhereInput
  }


  /**
   * Comments without action
   */
  export type CommentsArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
  }



  /**
   * Model Vote
   */


  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
    max: VoteMaxAggregateOutputType | null
  }

  export type VoteAvgAggregateOutputType = {
    id: number | null
    CommentID: number | null
    Count: number | null
    UserID: number | null
  }

  export type VoteSumAggregateOutputType = {
    id: number | null
    CommentID: number | null
    Count: number | null
    UserID: number | null
  }

  export type VoteMinAggregateOutputType = {
    id: number | null
    CommentID: number | null
    Count: number | null
    UserID: number | null
  }

  export type VoteMaxAggregateOutputType = {
    id: number | null
    CommentID: number | null
    Count: number | null
    UserID: number | null
  }

  export type VoteCountAggregateOutputType = {
    id: number
    CommentID: number
    Count: number
    UserID: number
    _all: number
  }


  export type VoteAvgAggregateInputType = {
    id?: true
    CommentID?: true
    Count?: true
    UserID?: true
  }

  export type VoteSumAggregateInputType = {
    id?: true
    CommentID?: true
    Count?: true
    UserID?: true
  }

  export type VoteMinAggregateInputType = {
    id?: true
    CommentID?: true
    Count?: true
    UserID?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    CommentID?: true
    Count?: true
    UserID?: true
  }

  export type VoteCountAggregateInputType = {
    id?: true
    CommentID?: true
    Count?: true
    UserID?: true
    _all?: true
  }

  export type VoteAggregateArgs = {
    /**
     * Filter which Vote to aggregate.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: VoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: VoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }


    
    
  export type VoteGroupByArgs = {
    where?: VoteWhereInput
    orderBy?: Enumerable<VoteOrderByInput>
    by: Array<VoteScalarFieldEnum>
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _avg?: VoteAvgAggregateInputType
    _sum?: VoteSumAggregateInputType
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }


  export type VoteGroupByOutputType = {
    id: number
    CommentID: number
    Count: number
    UserID: number | null
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Promise<
    Array<
      PickArray<VoteGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], VoteGroupByOutputType[P]> 
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      > 
    >


  export type VoteSelect = {
    id?: boolean
    CommentID?: boolean
    Comments?: boolean | CommentsArgs
    Count?: boolean
    UserID?: boolean
    Voter?: boolean | UserArgs
  }

  export type VoteInclude = {
    Comments?: boolean | CommentsArgs
    Voter?: boolean | UserArgs
  }

  export type VoteGetPayload<
    S extends boolean | null | undefined | VoteArgs,
    U = keyof S
      > = S extends true
        ? Vote
    : S extends undefined
    ? never
    : S extends VoteArgs | VoteFindManyArgs
    ?'include' extends U
    ? Vote  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Comments'
        ? CommentsGetPayload<S['include'][P]> | null :
        P extends 'Voter'
        ? UserGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Vote ?Vote [P]
  : 
          P extends 'Comments'
        ? CommentsGetPayload<S['select'][P]> | null :
        P extends 'Voter'
        ? UserGetPayload<S['select'][P]> | null : never
  } 
    : Vote
  : Vote


  type VoteCountArgs = Merge<
    Omit<VoteFindManyArgs, 'select' | 'include'> & {
      select?: VoteCountAggregateInputType | true
    }
  >

  export interface VoteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vote'> extends True ? CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>> : CheckSelect<T, Prisma__VoteClient<Vote | null >, Prisma__VoteClient<VoteGetPayload<T> | null >>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vote'> extends True ? CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>> : CheckSelect<T, Prisma__VoteClient<Vote | null >, Prisma__VoteClient<VoteGetPayload<T> | null >>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VoteFindManyArgs>(
      args?: SelectSubset<T, VoteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Vote>>, PrismaPromise<Array<VoteGetPayload<T>>>>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
    **/
    create<T extends VoteCreateArgs>(
      args: SelectSubset<T, VoteCreateArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Create many Votes.
     *     @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     *     @example
     *     // Create many Votes
     *     const vote = await prisma.vote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VoteCreateManyArgs>(
      args?: SelectSubset<T, VoteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
    **/
    delete<T extends VoteDeleteArgs>(
      args: SelectSubset<T, VoteDeleteArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoteUpdateArgs>(
      args: SelectSubset<T, VoteUpdateArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoteDeleteManyArgs>(
      args?: SelectSubset<T, VoteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoteUpdateManyArgs>(
      args: SelectSubset<T, VoteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
    **/
    upsert<T extends VoteUpsertArgs>(
      args: SelectSubset<T, VoteUpsertArgs>
    ): CheckSelect<T, Prisma__VoteClient<Vote>, Prisma__VoteClient<VoteGetPayload<T>>>

    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VoteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Comments<T extends CommentsArgs = {}>(args?: Subset<T, CommentsArgs>): CheckSelect<T, Prisma__CommentsClient<Comments | null >, Prisma__CommentsClient<CommentsGetPayload<T> | null >>;

    Voter<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Vote findUnique
   */
  export type VoteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Throw an Error if a Vote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Vote to fetch.
     * 
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote findFirst
   */
  export type VoteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Throw an Error if a Vote can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Vote to fetch.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     * 
    **/
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * Vote findMany
   */
  export type VoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Filter, which Votes to fetch.
     * 
    **/
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     * 
    **/
    orderBy?: Enumerable<VoteOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     * 
    **/
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VoteScalarFieldEnum>
  }


  /**
   * Vote create
   */
  export type VoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The data needed to create a Vote.
     * 
    **/
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }


  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs = {
    data: Enumerable<VoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vote update
   */
  export type VoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The data needed to update a Vote.
     * 
    **/
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     * 
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs = {
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    where?: VoteWhereInput
  }


  /**
   * Vote upsert
   */
  export type VoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * The filter to search for the Vote to update in case it exists.
     * 
    **/
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     * 
    **/
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }


  /**
   * Vote delete
   */
  export type VoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
    /**
     * Filter which Vote to delete.
     * 
    **/
    where: VoteWhereUniqueInput
  }


  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs = {
    where?: VoteWhereInput
  }


  /**
   * Vote without action
   */
  export type VoteArgs = {
    /**
     * Select specific fields to fetch from the Vote
     * 
    **/
    select?: VoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoteInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    FirstName: 'FirstName',
    LastName: 'LastName',
    DateOfBirth: 'DateOfBirth',
    Username: 'Username',
    Email: 'Email',
    Password: 'Password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id: 'id',
    Name: 'Name',
    Author: 'Author',
    PicUrl: 'PicUrl',
    Summery: 'Summery',
    ReaderId: 'ReaderId'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const UserBookFaveScalarFieldEnum: {
    id: 'id',
    UserID: 'UserID',
    BookID: 'BookID'
  };

  export type UserBookFaveScalarFieldEnum = (typeof UserBookFaveScalarFieldEnum)[keyof typeof UserBookFaveScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    BookID: 'BookID'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    id: 'id',
    CommentID: 'CommentID',
    Count: 'Count',
    UserID: 'UserID'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    FirstName?: StringFilter | string
    LastName?: StringFilter | string
    DateOfBirth?: StringFilter | string
    Username?: StringFilter | string
    Email?: StringFilter | string
    Password?: StringFilter | string
    Book?: BookListRelationFilter
    FaveBook?: XOR<UserBookFaveRelationFilter, UserBookFaveWhereInput> | null
    Vote?: VoteListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    DateOfBirth?: SortOrder
    Username?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    Email?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    FirstName?: StringWithAggregatesFilter | string
    LastName?: StringWithAggregatesFilter | string
    DateOfBirth?: StringWithAggregatesFilter | string
    Username?: StringWithAggregatesFilter | string
    Email?: StringWithAggregatesFilter | string
    Password?: StringWithAggregatesFilter | string
  }

  export type BookWhereInput = {
    AND?: Enumerable<BookWhereInput>
    OR?: Enumerable<BookWhereInput>
    NOT?: Enumerable<BookWhereInput>
    id?: IntFilter | number
    Name?: StringFilter | string
    Author?: StringFilter | string
    PicUrl?: StringFilter | string
    Summery?: StringFilter | string
    Comments?: CommentsListRelationFilter
    Reader?: XOR<UserRelationFilter, UserWhereInput>
    ReaderId?: IntFilter | number
    FaveBook?: XOR<UserBookFaveRelationFilter, UserBookFaveWhereInput> | null
  }

  export type BookOrderByInput = {
    id?: SortOrder
    Name?: SortOrder
    Author?: SortOrder
    PicUrl?: SortOrder
    Summery?: SortOrder
    ReaderId?: SortOrder
  }

  export type BookWhereUniqueInput = {
    id?: number
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Author?: StringWithAggregatesFilter | string
    PicUrl?: StringWithAggregatesFilter | string
    Summery?: StringWithAggregatesFilter | string
    ReaderId?: IntWithAggregatesFilter | number
  }

  export type UserBookFaveWhereInput = {
    AND?: Enumerable<UserBookFaveWhereInput>
    OR?: Enumerable<UserBookFaveWhereInput>
    NOT?: Enumerable<UserBookFaveWhereInput>
    id?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    UserID?: IntFilter | number
    Book?: XOR<BookRelationFilter, BookWhereInput>
    BookID?: IntFilter | number
  }

  export type UserBookFaveOrderByInput = {
    id?: SortOrder
    UserID?: SortOrder
    BookID?: SortOrder
  }

  export type UserBookFaveWhereUniqueInput = {
    id?: number
  }

  export type UserBookFaveScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserBookFaveScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserBookFaveScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserBookFaveScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    UserID?: IntWithAggregatesFilter | number
    BookID?: IntWithAggregatesFilter | number
  }

  export type CommentsWhereInput = {
    AND?: Enumerable<CommentsWhereInput>
    OR?: Enumerable<CommentsWhereInput>
    NOT?: Enumerable<CommentsWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Vote?: VoteListRelationFilter
    Books?: XOR<BookRelationFilter, BookWhereInput>
    BookID?: IntFilter | number
  }

  export type CommentsOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    BookID?: SortOrder
  }

  export type CommentsWhereUniqueInput = {
    id?: number
  }

  export type CommentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    BookID?: IntWithAggregatesFilter | number
  }

  export type VoteWhereInput = {
    AND?: Enumerable<VoteWhereInput>
    OR?: Enumerable<VoteWhereInput>
    NOT?: Enumerable<VoteWhereInput>
    id?: IntFilter | number
    CommentID?: IntFilter | number
    Comments?: XOR<CommentsRelationFilter, CommentsWhereInput> | null
    Count?: IntFilter | number
    UserID?: IntNullableFilter | number | null
    Voter?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type VoteOrderByInput = {
    id?: SortOrder
    CommentID?: SortOrder
    Count?: SortOrder
    UserID?: SortOrder
  }

  export type VoteWhereUniqueInput = {
    id?: number
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<VoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VoteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    CommentID?: IntWithAggregatesFilter | number
    Count?: IntWithAggregatesFilter | number
    UserID?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserCreateInput = {
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    Book?: BookCreateNestedManyWithoutReaderInput
    FaveBook?: UserBookFaveCreateNestedOneWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutVoterInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    Book?: BookUncheckedCreateNestedManyWithoutReaderInput
    FaveBook?: UserBookFaveUncheckedCreateNestedOneWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutVoterInput
  }

  export type UserUpdateInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Book?: BookUpdateManyWithoutReaderInput
    FaveBook?: UserBookFaveUpdateOneWithoutUserInput
    Vote?: VoteUpdateManyWithoutVoterInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Book?: BookUncheckedUpdateManyWithoutReaderInput
    FaveBook?: UserBookFaveUncheckedUpdateOneWithoutUserInput
    Vote?: VoteUncheckedUpdateManyWithoutVoterInput
  }

  export type UserCreateManyInput = {
    id?: number
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
  }

  export type UserUpdateManyMutationInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
  }

  export type BookCreateInput = {
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    Comments?: CommentsCreateNestedManyWithoutBooksInput
    Reader: UserCreateNestedOneWithoutBookInput
    FaveBook?: UserBookFaveCreateNestedOneWithoutBookInput
  }

  export type BookUncheckedCreateInput = {
    id?: number
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    ReaderId: number
    Comments?: CommentsUncheckedCreateNestedManyWithoutBooksInput
    FaveBook?: UserBookFaveUncheckedCreateNestedOneWithoutBookInput
  }

  export type BookUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    Comments?: CommentsUpdateManyWithoutBooksInput
    Reader?: UserUpdateOneRequiredWithoutBookInput
    FaveBook?: UserBookFaveUpdateOneWithoutBookInput
  }

  export type BookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    ReaderId?: IntFieldUpdateOperationsInput | number
    Comments?: CommentsUncheckedUpdateManyWithoutBooksInput
    FaveBook?: UserBookFaveUncheckedUpdateOneWithoutBookInput
  }

  export type BookCreateManyInput = {
    id?: number
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    ReaderId: number
  }

  export type BookUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
  }

  export type BookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    ReaderId?: IntFieldUpdateOperationsInput | number
  }

  export type UserBookFaveCreateInput = {
    User: UserCreateNestedOneWithoutFaveBookInput
    Book: BookCreateNestedOneWithoutFaveBookInput
  }

  export type UserBookFaveUncheckedCreateInput = {
    id?: number
    UserID: number
    BookID: number
  }

  export type UserBookFaveUpdateInput = {
    User?: UserUpdateOneRequiredWithoutFaveBookInput
    Book?: BookUpdateOneRequiredWithoutFaveBookInput
  }

  export type UserBookFaveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    BookID?: IntFieldUpdateOperationsInput | number
  }

  export type UserBookFaveCreateManyInput = {
    id?: number
    UserID: number
    BookID: number
  }

  export type UserBookFaveUpdateManyMutationInput = {

  }

  export type UserBookFaveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
    BookID?: IntFieldUpdateOperationsInput | number
  }

  export type CommentsCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    Vote?: VoteCreateNestedManyWithoutCommentsInput
    Books: BookCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    BookID: number
    Vote?: VoteUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type CommentsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vote?: VoteUpdateManyWithoutCommentsInput
    Books?: BookUpdateOneRequiredWithoutCommentsInput
  }

  export type CommentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BookID?: IntFieldUpdateOperationsInput | number
    Vote?: VoteUncheckedUpdateManyWithoutCommentsInput
  }

  export type CommentsCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    BookID: number
  }

  export type CommentsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BookID?: IntFieldUpdateOperationsInput | number
  }

  export type VoteCreateInput = {
    Count?: number
    Comments?: CommentsCreateNestedOneWithoutVoteInput
    Voter?: UserCreateNestedOneWithoutVoteInput
  }

  export type VoteUncheckedCreateInput = {
    id?: number
    CommentID: number
    Count?: number
    UserID?: number | null
  }

  export type VoteUpdateInput = {
    Count?: IntFieldUpdateOperationsInput | number
    Comments?: CommentsUpdateOneWithoutVoteInput
    Voter?: UserUpdateOneWithoutVoteInput
  }

  export type VoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    CommentID?: IntFieldUpdateOperationsInput | number
    Count?: IntFieldUpdateOperationsInput | number
    UserID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VoteCreateManyInput = {
    id?: number
    CommentID: number
    Count?: number
    UserID?: number | null
  }

  export type VoteUpdateManyMutationInput = {
    Count?: IntFieldUpdateOperationsInput | number
  }

  export type VoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    CommentID?: IntFieldUpdateOperationsInput | number
    Count?: IntFieldUpdateOperationsInput | number
    UserID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BookListRelationFilter = {
    every?: BookWhereInput
    some?: BookWhereInput
    none?: BookWhereInput
  }

  export type UserBookFaveRelationFilter = {
    is?: UserBookFaveWhereInput | null
    isNot?: UserBookFaveWhereInput | null
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type CommentsListRelationFilter = {
    every?: CommentsWhereInput
    some?: CommentsWhereInput
    none?: CommentsWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BookRelationFilter = {
    is?: BookWhereInput
    isNot?: BookWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type CommentsRelationFilter = {
    is?: CommentsWhereInput | null
    isNot?: CommentsWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type BookCreateNestedManyWithoutReaderInput = {
    create?: XOR<Enumerable<BookCreateWithoutReaderInput>, Enumerable<BookUncheckedCreateWithoutReaderInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutReaderInput>
    createMany?: BookCreateManyReaderInputEnvelope
    connect?: Enumerable<BookWhereUniqueInput>
  }

  export type UserBookFaveCreateNestedOneWithoutUserInput = {
    create?: XOR<UserBookFaveCreateWithoutUserInput, UserBookFaveUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserBookFaveCreateOrConnectWithoutUserInput
    connect?: UserBookFaveWhereUniqueInput
  }

  export type VoteCreateNestedManyWithoutVoterInput = {
    create?: XOR<Enumerable<VoteCreateWithoutVoterInput>, Enumerable<VoteUncheckedCreateWithoutVoterInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutVoterInput>
    createMany?: VoteCreateManyVoterInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type BookUncheckedCreateNestedManyWithoutReaderInput = {
    create?: XOR<Enumerable<BookCreateWithoutReaderInput>, Enumerable<BookUncheckedCreateWithoutReaderInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutReaderInput>
    createMany?: BookCreateManyReaderInputEnvelope
    connect?: Enumerable<BookWhereUniqueInput>
  }

  export type UserBookFaveUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserBookFaveCreateWithoutUserInput, UserBookFaveUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserBookFaveCreateOrConnectWithoutUserInput
    connect?: UserBookFaveWhereUniqueInput
  }

  export type VoteUncheckedCreateNestedManyWithoutVoterInput = {
    create?: XOR<Enumerable<VoteCreateWithoutVoterInput>, Enumerable<VoteUncheckedCreateWithoutVoterInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutVoterInput>
    createMany?: VoteCreateManyVoterInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BookUpdateManyWithoutReaderInput = {
    create?: XOR<Enumerable<BookCreateWithoutReaderInput>, Enumerable<BookUncheckedCreateWithoutReaderInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutReaderInput>
    upsert?: Enumerable<BookUpsertWithWhereUniqueWithoutReaderInput>
    createMany?: BookCreateManyReaderInputEnvelope
    connect?: Enumerable<BookWhereUniqueInput>
    set?: Enumerable<BookWhereUniqueInput>
    disconnect?: Enumerable<BookWhereUniqueInput>
    delete?: Enumerable<BookWhereUniqueInput>
    update?: Enumerable<BookUpdateWithWhereUniqueWithoutReaderInput>
    updateMany?: Enumerable<BookUpdateManyWithWhereWithoutReaderInput>
    deleteMany?: Enumerable<BookScalarWhereInput>
  }

  export type UserBookFaveUpdateOneWithoutUserInput = {
    create?: XOR<UserBookFaveCreateWithoutUserInput, UserBookFaveUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserBookFaveCreateOrConnectWithoutUserInput
    upsert?: UserBookFaveUpsertWithoutUserInput
    connect?: UserBookFaveWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserBookFaveUpdateWithoutUserInput, UserBookFaveUncheckedUpdateWithoutUserInput>
  }

  export type VoteUpdateManyWithoutVoterInput = {
    create?: XOR<Enumerable<VoteCreateWithoutVoterInput>, Enumerable<VoteUncheckedCreateWithoutVoterInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutVoterInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutVoterInput>
    createMany?: VoteCreateManyVoterInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutVoterInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutVoterInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BookUncheckedUpdateManyWithoutReaderInput = {
    create?: XOR<Enumerable<BookCreateWithoutReaderInput>, Enumerable<BookUncheckedCreateWithoutReaderInput>>
    connectOrCreate?: Enumerable<BookCreateOrConnectWithoutReaderInput>
    upsert?: Enumerable<BookUpsertWithWhereUniqueWithoutReaderInput>
    createMany?: BookCreateManyReaderInputEnvelope
    connect?: Enumerable<BookWhereUniqueInput>
    set?: Enumerable<BookWhereUniqueInput>
    disconnect?: Enumerable<BookWhereUniqueInput>
    delete?: Enumerable<BookWhereUniqueInput>
    update?: Enumerable<BookUpdateWithWhereUniqueWithoutReaderInput>
    updateMany?: Enumerable<BookUpdateManyWithWhereWithoutReaderInput>
    deleteMany?: Enumerable<BookScalarWhereInput>
  }

  export type UserBookFaveUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<UserBookFaveCreateWithoutUserInput, UserBookFaveUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserBookFaveCreateOrConnectWithoutUserInput
    upsert?: UserBookFaveUpsertWithoutUserInput
    connect?: UserBookFaveWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserBookFaveUpdateWithoutUserInput, UserBookFaveUncheckedUpdateWithoutUserInput>
  }

  export type VoteUncheckedUpdateManyWithoutVoterInput = {
    create?: XOR<Enumerable<VoteCreateWithoutVoterInput>, Enumerable<VoteUncheckedCreateWithoutVoterInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutVoterInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutVoterInput>
    createMany?: VoteCreateManyVoterInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutVoterInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutVoterInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type CommentsCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutBooksInput>, Enumerable<CommentsUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutBooksInput>
    createMany?: CommentsCreateManyBooksInputEnvelope
    connect?: Enumerable<CommentsWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutBookInput = {
    create?: XOR<UserCreateWithoutBookInput, UserUncheckedCreateWithoutBookInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookInput
    connect?: UserWhereUniqueInput
  }

  export type UserBookFaveCreateNestedOneWithoutBookInput = {
    create?: XOR<UserBookFaveCreateWithoutBookInput, UserBookFaveUncheckedCreateWithoutBookInput>
    connectOrCreate?: UserBookFaveCreateOrConnectWithoutBookInput
    connect?: UserBookFaveWhereUniqueInput
  }

  export type CommentsUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutBooksInput>, Enumerable<CommentsUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutBooksInput>
    createMany?: CommentsCreateManyBooksInputEnvelope
    connect?: Enumerable<CommentsWhereUniqueInput>
  }

  export type UserBookFaveUncheckedCreateNestedOneWithoutBookInput = {
    create?: XOR<UserBookFaveCreateWithoutBookInput, UserBookFaveUncheckedCreateWithoutBookInput>
    connectOrCreate?: UserBookFaveCreateOrConnectWithoutBookInput
    connect?: UserBookFaveWhereUniqueInput
  }

  export type CommentsUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutBooksInput>, Enumerable<CommentsUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<CommentsUpsertWithWhereUniqueWithoutBooksInput>
    createMany?: CommentsCreateManyBooksInputEnvelope
    connect?: Enumerable<CommentsWhereUniqueInput>
    set?: Enumerable<CommentsWhereUniqueInput>
    disconnect?: Enumerable<CommentsWhereUniqueInput>
    delete?: Enumerable<CommentsWhereUniqueInput>
    update?: Enumerable<CommentsUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<CommentsUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<CommentsScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutBookInput = {
    create?: XOR<UserCreateWithoutBookInput, UserUncheckedCreateWithoutBookInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookInput
    upsert?: UserUpsertWithoutBookInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBookInput, UserUncheckedUpdateWithoutBookInput>
  }

  export type UserBookFaveUpdateOneWithoutBookInput = {
    create?: XOR<UserBookFaveCreateWithoutBookInput, UserBookFaveUncheckedCreateWithoutBookInput>
    connectOrCreate?: UserBookFaveCreateOrConnectWithoutBookInput
    upsert?: UserBookFaveUpsertWithoutBookInput
    connect?: UserBookFaveWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserBookFaveUpdateWithoutBookInput, UserBookFaveUncheckedUpdateWithoutBookInput>
  }

  export type CommentsUncheckedUpdateManyWithoutBooksInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutBooksInput>, Enumerable<CommentsUncheckedCreateWithoutBooksInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutBooksInput>
    upsert?: Enumerable<CommentsUpsertWithWhereUniqueWithoutBooksInput>
    createMany?: CommentsCreateManyBooksInputEnvelope
    connect?: Enumerable<CommentsWhereUniqueInput>
    set?: Enumerable<CommentsWhereUniqueInput>
    disconnect?: Enumerable<CommentsWhereUniqueInput>
    delete?: Enumerable<CommentsWhereUniqueInput>
    update?: Enumerable<CommentsUpdateWithWhereUniqueWithoutBooksInput>
    updateMany?: Enumerable<CommentsUpdateManyWithWhereWithoutBooksInput>
    deleteMany?: Enumerable<CommentsScalarWhereInput>
  }

  export type UserBookFaveUncheckedUpdateOneWithoutBookInput = {
    create?: XOR<UserBookFaveCreateWithoutBookInput, UserBookFaveUncheckedCreateWithoutBookInput>
    connectOrCreate?: UserBookFaveCreateOrConnectWithoutBookInput
    upsert?: UserBookFaveUpsertWithoutBookInput
    connect?: UserBookFaveWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserBookFaveUpdateWithoutBookInput, UserBookFaveUncheckedUpdateWithoutBookInput>
  }

  export type UserCreateNestedOneWithoutFaveBookInput = {
    create?: XOR<UserCreateWithoutFaveBookInput, UserUncheckedCreateWithoutFaveBookInput>
    connectOrCreate?: UserCreateOrConnectWithoutFaveBookInput
    connect?: UserWhereUniqueInput
  }

  export type BookCreateNestedOneWithoutFaveBookInput = {
    create?: XOR<BookCreateWithoutFaveBookInput, BookUncheckedCreateWithoutFaveBookInput>
    connectOrCreate?: BookCreateOrConnectWithoutFaveBookInput
    connect?: BookWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFaveBookInput = {
    create?: XOR<UserCreateWithoutFaveBookInput, UserUncheckedCreateWithoutFaveBookInput>
    connectOrCreate?: UserCreateOrConnectWithoutFaveBookInput
    upsert?: UserUpsertWithoutFaveBookInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFaveBookInput, UserUncheckedUpdateWithoutFaveBookInput>
  }

  export type BookUpdateOneRequiredWithoutFaveBookInput = {
    create?: XOR<BookCreateWithoutFaveBookInput, BookUncheckedCreateWithoutFaveBookInput>
    connectOrCreate?: BookCreateOrConnectWithoutFaveBookInput
    upsert?: BookUpsertWithoutFaveBookInput
    connect?: BookWhereUniqueInput
    update?: XOR<BookUpdateWithoutFaveBookInput, BookUncheckedUpdateWithoutFaveBookInput>
  }

  export type VoteCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<VoteCreateWithoutCommentsInput>, Enumerable<VoteUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutCommentsInput>
    createMany?: VoteCreateManyCommentsInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type BookCreateNestedOneWithoutCommentsInput = {
    create?: XOR<BookCreateWithoutCommentsInput, BookUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BookCreateOrConnectWithoutCommentsInput
    connect?: BookWhereUniqueInput
  }

  export type VoteUncheckedCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<VoteCreateWithoutCommentsInput>, Enumerable<VoteUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutCommentsInput>
    createMany?: VoteCreateManyCommentsInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type VoteUpdateManyWithoutCommentsInput = {
    create?: XOR<Enumerable<VoteCreateWithoutCommentsInput>, Enumerable<VoteUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: VoteCreateManyCommentsInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type BookUpdateOneRequiredWithoutCommentsInput = {
    create?: XOR<BookCreateWithoutCommentsInput, BookUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BookCreateOrConnectWithoutCommentsInput
    upsert?: BookUpsertWithoutCommentsInput
    connect?: BookWhereUniqueInput
    update?: XOR<BookUpdateWithoutCommentsInput, BookUncheckedUpdateWithoutCommentsInput>
  }

  export type VoteUncheckedUpdateManyWithoutCommentsInput = {
    create?: XOR<Enumerable<VoteCreateWithoutCommentsInput>, Enumerable<VoteUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<VoteCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<VoteUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: VoteCreateManyCommentsInputEnvelope
    connect?: Enumerable<VoteWhereUniqueInput>
    set?: Enumerable<VoteWhereUniqueInput>
    disconnect?: Enumerable<VoteWhereUniqueInput>
    delete?: Enumerable<VoteWhereUniqueInput>
    update?: Enumerable<VoteUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<VoteUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<VoteScalarWhereInput>
  }

  export type CommentsCreateNestedOneWithoutVoteInput = {
    create?: XOR<CommentsCreateWithoutVoteInput, CommentsUncheckedCreateWithoutVoteInput>
    connectOrCreate?: CommentsCreateOrConnectWithoutVoteInput
    connect?: CommentsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVoteInput = {
    create?: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutVoteInput
    connect?: UserWhereUniqueInput
  }

  export type CommentsUpdateOneWithoutVoteInput = {
    create?: XOR<CommentsCreateWithoutVoteInput, CommentsUncheckedCreateWithoutVoteInput>
    connectOrCreate?: CommentsCreateOrConnectWithoutVoteInput
    upsert?: CommentsUpsertWithoutVoteInput
    connect?: CommentsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<CommentsUpdateWithoutVoteInput, CommentsUncheckedUpdateWithoutVoteInput>
  }

  export type UserUpdateOneWithoutVoteInput = {
    create?: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutVoteInput
    upsert?: UserUpsertWithoutVoteInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUpdateWithoutVoteInput, UserUncheckedUpdateWithoutVoteInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type BookCreateWithoutReaderInput = {
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    Comments?: CommentsCreateNestedManyWithoutBooksInput
    FaveBook?: UserBookFaveCreateNestedOneWithoutBookInput
  }

  export type BookUncheckedCreateWithoutReaderInput = {
    id?: number
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    Comments?: CommentsUncheckedCreateNestedManyWithoutBooksInput
    FaveBook?: UserBookFaveUncheckedCreateNestedOneWithoutBookInput
  }

  export type BookCreateOrConnectWithoutReaderInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutReaderInput, BookUncheckedCreateWithoutReaderInput>
  }

  export type BookCreateManyReaderInputEnvelope = {
    data: Enumerable<BookCreateManyReaderInput>
    skipDuplicates?: boolean
  }

  export type UserBookFaveCreateWithoutUserInput = {
    Book: BookCreateNestedOneWithoutFaveBookInput
  }

  export type UserBookFaveUncheckedCreateWithoutUserInput = {
    id?: number
    BookID: number
  }

  export type UserBookFaveCreateOrConnectWithoutUserInput = {
    where: UserBookFaveWhereUniqueInput
    create: XOR<UserBookFaveCreateWithoutUserInput, UserBookFaveUncheckedCreateWithoutUserInput>
  }

  export type VoteCreateWithoutVoterInput = {
    Count?: number
    Comments?: CommentsCreateNestedOneWithoutVoteInput
  }

  export type VoteUncheckedCreateWithoutVoterInput = {
    id?: number
    CommentID: number
    Count?: number
  }

  export type VoteCreateOrConnectWithoutVoterInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput>
  }

  export type VoteCreateManyVoterInputEnvelope = {
    data: Enumerable<VoteCreateManyVoterInput>
    skipDuplicates?: boolean
  }

  export type BookUpsertWithWhereUniqueWithoutReaderInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutReaderInput, BookUncheckedUpdateWithoutReaderInput>
    create: XOR<BookCreateWithoutReaderInput, BookUncheckedCreateWithoutReaderInput>
  }

  export type BookUpdateWithWhereUniqueWithoutReaderInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutReaderInput, BookUncheckedUpdateWithoutReaderInput>
  }

  export type BookUpdateManyWithWhereWithoutReaderInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutBookInput>
  }

  export type BookScalarWhereInput = {
    AND?: Enumerable<BookScalarWhereInput>
    OR?: Enumerable<BookScalarWhereInput>
    NOT?: Enumerable<BookScalarWhereInput>
    id?: IntFilter | number
    Name?: StringFilter | string
    Author?: StringFilter | string
    PicUrl?: StringFilter | string
    Summery?: StringFilter | string
    ReaderId?: IntFilter | number
  }

  export type UserBookFaveUpsertWithoutUserInput = {
    update: XOR<UserBookFaveUpdateWithoutUserInput, UserBookFaveUncheckedUpdateWithoutUserInput>
    create: XOR<UserBookFaveCreateWithoutUserInput, UserBookFaveUncheckedCreateWithoutUserInput>
  }

  export type UserBookFaveUpdateWithoutUserInput = {
    Book?: BookUpdateOneRequiredWithoutFaveBookInput
  }

  export type UserBookFaveUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    BookID?: IntFieldUpdateOperationsInput | number
  }

  export type VoteUpsertWithWhereUniqueWithoutVoterInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutVoterInput, VoteUncheckedUpdateWithoutVoterInput>
    create: XOR<VoteCreateWithoutVoterInput, VoteUncheckedCreateWithoutVoterInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutVoterInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutVoterInput, VoteUncheckedUpdateWithoutVoterInput>
  }

  export type VoteUpdateManyWithWhereWithoutVoterInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutVoteInput>
  }

  export type VoteScalarWhereInput = {
    AND?: Enumerable<VoteScalarWhereInput>
    OR?: Enumerable<VoteScalarWhereInput>
    NOT?: Enumerable<VoteScalarWhereInput>
    id?: IntFilter | number
    CommentID?: IntFilter | number
    Count?: IntFilter | number
    UserID?: IntNullableFilter | number | null
  }

  export type CommentsCreateWithoutBooksInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    Vote?: VoteCreateNestedManyWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutBooksInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Vote?: VoteUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type CommentsCreateOrConnectWithoutBooksInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutBooksInput, CommentsUncheckedCreateWithoutBooksInput>
  }

  export type CommentsCreateManyBooksInputEnvelope = {
    data: Enumerable<CommentsCreateManyBooksInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutBookInput = {
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    FaveBook?: UserBookFaveCreateNestedOneWithoutUserInput
    Vote?: VoteCreateNestedManyWithoutVoterInput
  }

  export type UserUncheckedCreateWithoutBookInput = {
    id?: number
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    FaveBook?: UserBookFaveUncheckedCreateNestedOneWithoutUserInput
    Vote?: VoteUncheckedCreateNestedManyWithoutVoterInput
  }

  export type UserCreateOrConnectWithoutBookInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookInput, UserUncheckedCreateWithoutBookInput>
  }

  export type UserBookFaveCreateWithoutBookInput = {
    User: UserCreateNestedOneWithoutFaveBookInput
  }

  export type UserBookFaveUncheckedCreateWithoutBookInput = {
    id?: number
    UserID: number
  }

  export type UserBookFaveCreateOrConnectWithoutBookInput = {
    where: UserBookFaveWhereUniqueInput
    create: XOR<UserBookFaveCreateWithoutBookInput, UserBookFaveUncheckedCreateWithoutBookInput>
  }

  export type CommentsUpsertWithWhereUniqueWithoutBooksInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutBooksInput, CommentsUncheckedUpdateWithoutBooksInput>
    create: XOR<CommentsCreateWithoutBooksInput, CommentsUncheckedCreateWithoutBooksInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutBooksInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutBooksInput, CommentsUncheckedUpdateWithoutBooksInput>
  }

  export type CommentsUpdateManyWithWhereWithoutBooksInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutCommentsInput>
  }

  export type CommentsScalarWhereInput = {
    AND?: Enumerable<CommentsScalarWhereInput>
    OR?: Enumerable<CommentsScalarWhereInput>
    NOT?: Enumerable<CommentsScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    BookID?: IntFilter | number
  }

  export type UserUpsertWithoutBookInput = {
    update: XOR<UserUpdateWithoutBookInput, UserUncheckedUpdateWithoutBookInput>
    create: XOR<UserCreateWithoutBookInput, UserUncheckedCreateWithoutBookInput>
  }

  export type UserUpdateWithoutBookInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FaveBook?: UserBookFaveUpdateOneWithoutUserInput
    Vote?: VoteUpdateManyWithoutVoterInput
  }

  export type UserUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    FaveBook?: UserBookFaveUncheckedUpdateOneWithoutUserInput
    Vote?: VoteUncheckedUpdateManyWithoutVoterInput
  }

  export type UserBookFaveUpsertWithoutBookInput = {
    update: XOR<UserBookFaveUpdateWithoutBookInput, UserBookFaveUncheckedUpdateWithoutBookInput>
    create: XOR<UserBookFaveCreateWithoutBookInput, UserBookFaveUncheckedCreateWithoutBookInput>
  }

  export type UserBookFaveUpdateWithoutBookInput = {
    User?: UserUpdateOneRequiredWithoutFaveBookInput
  }

  export type UserBookFaveUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    UserID?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutFaveBookInput = {
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    Book?: BookCreateNestedManyWithoutReaderInput
    Vote?: VoteCreateNestedManyWithoutVoterInput
  }

  export type UserUncheckedCreateWithoutFaveBookInput = {
    id?: number
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    Book?: BookUncheckedCreateNestedManyWithoutReaderInput
    Vote?: VoteUncheckedCreateNestedManyWithoutVoterInput
  }

  export type UserCreateOrConnectWithoutFaveBookInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFaveBookInput, UserUncheckedCreateWithoutFaveBookInput>
  }

  export type BookCreateWithoutFaveBookInput = {
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    Comments?: CommentsCreateNestedManyWithoutBooksInput
    Reader: UserCreateNestedOneWithoutBookInput
  }

  export type BookUncheckedCreateWithoutFaveBookInput = {
    id?: number
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    ReaderId: number
    Comments?: CommentsUncheckedCreateNestedManyWithoutBooksInput
  }

  export type BookCreateOrConnectWithoutFaveBookInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutFaveBookInput, BookUncheckedCreateWithoutFaveBookInput>
  }

  export type UserUpsertWithoutFaveBookInput = {
    update: XOR<UserUpdateWithoutFaveBookInput, UserUncheckedUpdateWithoutFaveBookInput>
    create: XOR<UserCreateWithoutFaveBookInput, UserUncheckedCreateWithoutFaveBookInput>
  }

  export type UserUpdateWithoutFaveBookInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Book?: BookUpdateManyWithoutReaderInput
    Vote?: VoteUpdateManyWithoutVoterInput
  }

  export type UserUncheckedUpdateWithoutFaveBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Book?: BookUncheckedUpdateManyWithoutReaderInput
    Vote?: VoteUncheckedUpdateManyWithoutVoterInput
  }

  export type BookUpsertWithoutFaveBookInput = {
    update: XOR<BookUpdateWithoutFaveBookInput, BookUncheckedUpdateWithoutFaveBookInput>
    create: XOR<BookCreateWithoutFaveBookInput, BookUncheckedCreateWithoutFaveBookInput>
  }

  export type BookUpdateWithoutFaveBookInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    Comments?: CommentsUpdateManyWithoutBooksInput
    Reader?: UserUpdateOneRequiredWithoutBookInput
  }

  export type BookUncheckedUpdateWithoutFaveBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    ReaderId?: IntFieldUpdateOperationsInput | number
    Comments?: CommentsUncheckedUpdateManyWithoutBooksInput
  }

  export type VoteCreateWithoutCommentsInput = {
    Count?: number
    Voter?: UserCreateNestedOneWithoutVoteInput
  }

  export type VoteUncheckedCreateWithoutCommentsInput = {
    id?: number
    Count?: number
    UserID?: number | null
  }

  export type VoteCreateOrConnectWithoutCommentsInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutCommentsInput, VoteUncheckedCreateWithoutCommentsInput>
  }

  export type VoteCreateManyCommentsInputEnvelope = {
    data: Enumerable<VoteCreateManyCommentsInput>
    skipDuplicates?: boolean
  }

  export type BookCreateWithoutCommentsInput = {
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    Reader: UserCreateNestedOneWithoutBookInput
    FaveBook?: UserBookFaveCreateNestedOneWithoutBookInput
  }

  export type BookUncheckedCreateWithoutCommentsInput = {
    id?: number
    Name: string
    Author: string
    PicUrl: string
    Summery: string
    ReaderId: number
    FaveBook?: UserBookFaveUncheckedCreateNestedOneWithoutBookInput
  }

  export type BookCreateOrConnectWithoutCommentsInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutCommentsInput, BookUncheckedCreateWithoutCommentsInput>
  }

  export type VoteUpsertWithWhereUniqueWithoutCommentsInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutCommentsInput, VoteUncheckedUpdateWithoutCommentsInput>
    create: XOR<VoteCreateWithoutCommentsInput, VoteUncheckedCreateWithoutCommentsInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutCommentsInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutCommentsInput, VoteUncheckedUpdateWithoutCommentsInput>
  }

  export type VoteUpdateManyWithWhereWithoutCommentsInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutVoteInput>
  }

  export type BookUpsertWithoutCommentsInput = {
    update: XOR<BookUpdateWithoutCommentsInput, BookUncheckedUpdateWithoutCommentsInput>
    create: XOR<BookCreateWithoutCommentsInput, BookUncheckedCreateWithoutCommentsInput>
  }

  export type BookUpdateWithoutCommentsInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    Reader?: UserUpdateOneRequiredWithoutBookInput
    FaveBook?: UserBookFaveUpdateOneWithoutBookInput
  }

  export type BookUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    ReaderId?: IntFieldUpdateOperationsInput | number
    FaveBook?: UserBookFaveUncheckedUpdateOneWithoutBookInput
  }

  export type CommentsCreateWithoutVoteInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    Books: BookCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutVoteInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    BookID: number
  }

  export type CommentsCreateOrConnectWithoutVoteInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutVoteInput, CommentsUncheckedCreateWithoutVoteInput>
  }

  export type UserCreateWithoutVoteInput = {
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    Book?: BookCreateNestedManyWithoutReaderInput
    FaveBook?: UserBookFaveCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVoteInput = {
    id?: number
    FirstName: string
    LastName: string
    DateOfBirth: string
    Username: string
    Email: string
    Password: string
    Book?: BookUncheckedCreateNestedManyWithoutReaderInput
    FaveBook?: UserBookFaveUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVoteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
  }

  export type CommentsUpsertWithoutVoteInput = {
    update: XOR<CommentsUpdateWithoutVoteInput, CommentsUncheckedUpdateWithoutVoteInput>
    create: XOR<CommentsCreateWithoutVoteInput, CommentsUncheckedCreateWithoutVoteInput>
  }

  export type CommentsUpdateWithoutVoteInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Books?: BookUpdateOneRequiredWithoutCommentsInput
  }

  export type CommentsUncheckedUpdateWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BookID?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutVoteInput = {
    update: XOR<UserUpdateWithoutVoteInput, UserUncheckedUpdateWithoutVoteInput>
    create: XOR<UserCreateWithoutVoteInput, UserUncheckedCreateWithoutVoteInput>
  }

  export type UserUpdateWithoutVoteInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Book?: BookUpdateManyWithoutReaderInput
    FaveBook?: UserBookFaveUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    DateOfBirth?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Book?: BookUncheckedUpdateManyWithoutReaderInput
    FaveBook?: UserBookFaveUncheckedUpdateOneWithoutUserInput
  }

  export type BookCreateManyReaderInput = {
    id?: number
    Name: string
    Author: string
    PicUrl: string
    Summery: string
  }

  export type VoteCreateManyVoterInput = {
    id?: number
    CommentID: number
    Count?: number
  }

  export type BookUpdateWithoutReaderInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    Comments?: CommentsUpdateManyWithoutBooksInput
    FaveBook?: UserBookFaveUpdateOneWithoutBookInput
  }

  export type BookUncheckedUpdateWithoutReaderInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
    Comments?: CommentsUncheckedUpdateManyWithoutBooksInput
    FaveBook?: UserBookFaveUncheckedUpdateOneWithoutBookInput
  }

  export type BookUncheckedUpdateManyWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Author?: StringFieldUpdateOperationsInput | string
    PicUrl?: StringFieldUpdateOperationsInput | string
    Summery?: StringFieldUpdateOperationsInput | string
  }

  export type VoteUpdateWithoutVoterInput = {
    Count?: IntFieldUpdateOperationsInput | number
    Comments?: CommentsUpdateOneWithoutVoteInput
  }

  export type VoteUncheckedUpdateWithoutVoterInput = {
    id?: IntFieldUpdateOperationsInput | number
    CommentID?: IntFieldUpdateOperationsInput | number
    Count?: IntFieldUpdateOperationsInput | number
  }

  export type VoteUncheckedUpdateManyWithoutVoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    CommentID?: IntFieldUpdateOperationsInput | number
    Count?: IntFieldUpdateOperationsInput | number
  }

  export type CommentsCreateManyBooksInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentsUpdateWithoutBooksInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vote?: VoteUpdateManyWithoutCommentsInput
  }

  export type CommentsUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Vote?: VoteUncheckedUpdateManyWithoutCommentsInput
  }

  export type CommentsUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateManyCommentsInput = {
    id?: number
    Count?: number
    UserID?: number | null
  }

  export type VoteUpdateWithoutCommentsInput = {
    Count?: IntFieldUpdateOperationsInput | number
    Voter?: UserUpdateOneWithoutVoteInput
  }

  export type VoteUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Count?: IntFieldUpdateOperationsInput | number
    UserID?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}